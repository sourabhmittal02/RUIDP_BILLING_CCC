@*Close Model*@


<link href="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/css/bootstrap4-toggle.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/gh/gitbrent/bootstrap4-toggle@3.6.1/js/bootstrap4-toggle.min.js"></script>
<script type="text/javascript" src="~/Scripts/jquery.validate.min.js"></script>
<script type="text/javascript" src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>

@section scripts{
    <link href="~/Content/css/select2.min.css" rel="stylesheet" type="text/css" />
    <script type="text/javascript" src="~/Scripts/select2.min.js"></script>
    <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
}
<script type="text/javascript">
    $(document).ready(function () {

            $(function () {
                $('select').select2({
                    dropdownCssClass: 'custom-dropdown'
                });
                $('select').on('select2:open', function (e) {
                    $('.custom-dropdown').parent().css('z-index', 99999);
                });

                $('#ddlOutage1').select2({
                    placeholder: "Outage Type",
                    minimumResultsForSearch: -1,
                    selectOnClose: true,
                    width: '370px',
                 });

                $('#ddlOutage2').select2({
                    placeholder: "Sub Outage",
                    minimumResultsForSearch: -1,
                    selectOnClose: true,
                    width: '370px',
                });
                $('#ddlCause').select2({
                    placeholder: "Outage Cause",
                    minimumResultsForSearch: -1,
                    selectOnClose: true,
                    width: '370px',
                });
                $('#ddlAbnormality').select2({
                    placeholder: "Abnormality",
                    minimumResultsForSearch: -1,
                    selectOnClose: true,
                    width: '370px',
                });
            });

            $('#ddlOutage1').change(function () {
                $("#ddlOutage2").empty().trigger('change');
                $("#ddlCause").empty().trigger('change');

                var selectedOutageType = $("#ddlOutage1").val();
                fillSubOutage(selectedOutageType);
                fillCause(selectedOutageType);

            });
        function fillSubOutage(selectedOutageType) {
                $.ajax({
                    type: "GET",
                    url: '/Complaint/GetSubOutage',
                    data: { OutagetypeId: selectedOutageType },
                    contentType: "application/json;charset=utf-8",
                    success: function (data) {
                        if (data) {

                            for (var i = 0; i < data.length; i++) {
                                var opt = new Option(data[i].Text, data[i].Value);
                                $('#ddlOutage2').append(opt);
                            }
                            return;
                        } else {
                            alert('error');
                        }
                    }
                });
            }
            function fillCause(selectedOutageType) {
                $.ajax({
                    type: "GET",
                    url: '/Complaint/GetOutageCause',
                    data: { OutagetypeId: selectedOutageType },
                    contentType: "application/json;charset=utf-8",
                    success: function (data) {
                        if (data) {

                            for (var i = 0; i < data.length; i++) {
                                var opt = new Option(data[i].Text, data[i].Value);
                                $('#ddlCause').append(opt);
                            }
                            return;
                        } else {
                            alert('error');
                        }
                    }
                });
        }




            $('#toggle-eventConfirm').change(function () {
                 if ($(this).prop('checked')) {
                    $("#IsConfirmByCustomer").val(true);

                }
                else {
                    $("#IsConfirmByCustomer").val(false);
                }
            });

            $('#submitComplaint').click(function () {
                $("#UserId").val(@Session["UserId"]);
                $("#CauseCollectionId").val($("#ddlCause").val());
                $("#OutageTypeCollectionId2").val($("#ddlOutage2").val());
            });


    });
    function closeComplaint() {
        var TeamDetailPostBackURL = '/Complaint/closeComplaint';
        var model = new Object();
        model.ComplaintNo = $("#ComplaintNo").val();
        model.OutageTypeCollectionId1 = $("#ddlOutage1").val();
        model.OutageTypeCollectionId2 = $("#ddlOutage2").val();
        model.CauseCollectionId = $("#ddlCause").val();
        model.StatusBeforeRectification = $("#StatusBeforeRectification").val();
        model.StatusAfterRectification = $("#StatusAfterRectification").val();
        model.StatusAfterRectification = $("#StatusAfterRectification").val();
        model.AbnormalityCollectionId = $("#AbnormalityCollectionId").val();
        model.MeterNo = $("#MeterNo").val();
        model.Reading = $("#Reading").val();
        model.Type = $("#Type").val();
        model.IsConfirmByCustomer = $("#IsConfirmByCustomer").val();
        model.Remarks = $("#REMARKS").val();


        $.ajax({
            type: "GET",
            url: TeamDetailPostBackURL,
            contentType: "application/json; charset=utf-8",
            datatype: "json",
            data: model,
            success: function (data) {
                if (data.status == -1) {
                    $("#ClosePopup").modal('hide');
                    swal("error in saving", "error");
                }
                else {
                    $("#ClosePopup").modal('hide');
                    myfun();
                    swal("Saved Successfully", "success");
            window.location.href = url;
                }
            },
            error: function (data) {
                $("#ClosePopup").modal('hide');
                swal("Dynamic content load failed.!", "error");
            }
        });
    }


</script>
@model ComplaintTracker.Models.ModelCloseComplaint

    @Html.HiddenFor(model => model.IsConfirmByCustomer);
    <div class="modal fade" id="ClosePopup" tabindex="-1" aria-hidden="true" style="display: none;" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog modal-lg" style="max-width:100%">
            <div class="modal-content">
                <div class="modal-header with-border text-white">
                    <h2 class="modal-title">Complaint Close</h2>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="row mb-1">
                        <div class="col-md-6">
                            <label for="ComplaintNo">Complaint No.</label>
                            @Html.EditorFor(model => model.ComplaintNo, new { htmlAttributes = new { placeholder = "Complaint No.", @class = "form-control", @disabled = "disabled" } })

                            @Html.HiddenFor(model => model.ComplaintNo)
                            @Html.HiddenFor(model => model.OutageTypeCollectionId2)

                        </div>
                        <div class="col-md-6">
                            <label for="MeterNo">MeterNo</label>
                            @Html.EditorFor(model => model.MeterNo, new { htmlAttributes = new { placeholder = "MeterNo", @class = "form-control" } })

                            @Html.ValidationMessageFor(model => model.MeterNo, "", new { @class = "text-danger" })

                        </div>
                    </div>
                    <div class="row mb-1">
                        <div class="col-md-6">
                            <label for="OutageTypeCollectionId1">Outage Type 1</label>
                            @Html.DropDownListFor(x => Model.OutageTypeCollectionId1, new SelectList(Model.OutageTypeCollection1, "Value", "Text"), new { @class = "form-control", id = "ddlOutage1" })

                        </div>
                        <div class="col-md-6">
                            <label for="Reading">Reading</label>
                            @Html.EditorFor(model => model.Reading, new { htmlAttributes = new { placeholder = "Reading", @class = "form-control" } })

                            @Html.ValidationMessageFor(model => model.Reading, "", new { @class = "text-danger" })

                        </div>
                    </div>
                    <div class="row mb-1">
                        @*<div class="col-md-6">
            <label for="ddlOutage2">Outage Type 2<font color="Red"> *</font></label>
            <select id="ddlOutage2" class="form-control" required>
            </select>


        </div>*@
                        <div class="col-md-6">
                            <label for="StatusBeforeRectification">StatusBeforeRectification</label>
                            @Html.EditorFor(model => model.StatusBeforeRectification, new { htmlAttributes = new { placeholder = "StatusBeforeRectification", @class = "form-control" } })

                            @Html.ValidationMessageFor(model => model.StatusBeforeRectification, "", new { @class = "text-danger" })

                        </div>
                        <div class="col-md-6">
                            <label for="Type">Type</label>
                            @Html.EditorFor(model => model.Type, new { htmlAttributes = new { placeholder = "ADDRESS 3", @class = "form-control" } })

                            @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })

                        </div>
                    </div>
                    @*<div class="row mb-1">
                        <div class="col-md-6">
                            <label for="ddlCause">Cause</label>
                            <select id="ddlCause" class="form-control">
                            </select>
                            @Html.HiddenFor(model => model.CauseCollectionId)
                        </div>
                        <div class="col-md-6">
                            <label for="StatusBeforeRectification">StatusBeforeRectification</label>
                            @Html.EditorFor(model => model.StatusBeforeRectification, new { htmlAttributes = new { placeholder = "StatusBeforeRectification", @class = "form-control" } })

                            @Html.ValidationMessageFor(model => model.StatusBeforeRectification, "", new { @class = "text-danger" })

                        </div>
                    </div>*@
                    <div class="row mb-1">
                        <div class="col-md-6">
                            <label for="StatusAfterRectification">StatusAfterRectification</label>
                            @Html.EditorFor(model => model.StatusAfterRectification, new { htmlAttributes = new { placeholder = "StatusAfterRectification", @class = "form-control" } })

                            @Html.ValidationMessageFor(model => model.StatusAfterRectification, "", new { @class = "text-danger" })

                        </div>
                        <div class="col-md-6">
                            <label for="AbnormalityCollectionId">Abnormality</label>
                            @Html.DropDownListFor(x => Model.AbnormalityCollectionId, new SelectList(Model.AbnormalityCollection, "Value", "Text"), new { @class = "form-control", id = "ddlAbnormality" })

                        </div>
                    </div>
                    <div class="row mb-1">
                        <div class="col-md-6  mt-4">

                            <p class="text-sm text-secondary fw-bold">
                                Confirm By Consumer
                                <input id="toggle-eventConfirm" type="checkbox" data-toggle="toggle" data-onstyle="success" data-offstyle="danger" data-size="sm">
                                @Html.ValidationMessageFor(model => model.IsConfirmByCustomer, "", new { @class = "text-danger" })
                            </p>

                        </div>
                        <div class="col-md-6">
                            <label for="REMARKS">Remarks</label>
                            <textarea class="form-control" name="REMARKS" id="REMARKS" style="height: 147px;" value="" placeholder="Remark" required></textarea>

                            @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })

                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" id="submitComplaint" onclick="closeComplaint()">Update</button>
                    <button type="button" class="btn btn-danger" data-dismiss="modal" aria-label="Close">Close</button>
                </div>
            </div>
        </div>
    </div>


