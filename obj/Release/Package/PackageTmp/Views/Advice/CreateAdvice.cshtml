@model ComplaintTracker.Models.ModelAdvice
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var fromDate = DateTime.Now;
}



@section scripts{
    @*<style type="text/css">
            .required::after {
                content: "*";
                font-weight: bold;
                color: red;
                padding-left: 2px;
            }
        </style>*@
    <link href="~/Content/css/select2.min.css" rel="stylesheet" type="text/css" />
    <script type="text/javascript" src="~/Scripts/select2.min.js"></script>
    <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.js"></script>
    
    <script type="text/javascript">

        $(document).ready(() => {
            $('select:not(.normal)').each(function () {
                $(this).select2({
                    dropdownParent: $(this).parent()
                });
            });
            $(".searchtag").keypress(function (event) {
                if (event.which == 13) {
                    $("#btnSearch").click();
                    return false;
                }
            });

            $("#dco").animate({ "opacity": "hide", top: "100" }, 10);
            setTimeout(function () {
                $('#successMessage').fadeOut('fast');
            }, 5000); // <-- time in milliseconds

        });
        $(function () {
            $('#Consumertype').select2({
                selectOnClose: true,
            });
            $('#Consumertype').change(function () {
                var consumerType = $("#Consumertype").val();
                if (consumerType == 1 || consumerType == 2) {
                    $("#mco").animate({ "opacity": "show", top: "100" }, 1000);
                    $("#dco").animate({ "opacity": "hide", top: "100" }, 1000);
                }
                else if (consumerType == 3 || consumerType == 4) {
                    $("#mco").animate({ "opacity": "hide", top: "100" }, 1000);
                    $("#dco").animate({ "opacity": "show", top: "100" }, 1000);
                }
            });
            $('#btnSearch').click(function () {

                searchKno = $('#txtsearchKno').val();

                $.ajax({
                    type: "GET",
                    url: '/Advice/GetList',
                    data: { kno: searchKno },
                    contentType: "application/json;charset=utf-8",
                    dataType: "json",
                    async: "true",
                    cache: "false",
                    success: function (data) {
                        /*                          alert(data.complaintHistories[0].Kno)*/
                        $('#comp').DataTable(
                            {
                                data: data.complaintHistories,
                                columns: [
                                    {
                                        'width': 120,
                                        data: 'Kno',
                                        name: 'Kno',
                                        render: function (data, type, row, meta) {
                                            return '<a class=" d-inline-block fw-normal w-100 h-100 pe-auto" href="#" onclick="complaintShow(' + row.Kno + ')">' + row.Kno + '</a>'
                                        },
                                    },
                                    { 'data': 'name', 'width': 300 },
                                    { 'data': 'Address', 'width': 500 },
                                    { 'data': 'MeterNo' },
                                    { 'data': 'PrevReading', 'width': 100 },
                                    { 'data': 'PrevReadingdate' },
                                    { 'data': 'CurrentReadingdate' },
                                ],
                                processing: true,
                                pageLength: 5,
                                lengthChange: false,
                                bFilter: false,
                                destroy: true,
                                bSort: false
                            });
                        /*$('#comp').DataTable().row("tr:first-child").remove().draw();*/
                        $('#submitComplaint').prop('disabled', false);
                        $('#submitComplaint1').prop('disabled', false);
                    },
                    error: function (errormessage) {
                        alert(errormessage.responseText);
                    }
                });
            });

            $('#submitComplaint').click(function () {
                $("#Order_Type").val($("#Consumertype").val());
                $("#Kno").val($("#lblkno").val());

            });

            $('#submitComplaint1').click(function () {
                $("#Order_Type").val($("#Consumertype").val());
                $("#Kno").val($("#lblkno").val());

            });
        });

        var complaintShow = function (recordId) {
            var TeamDetailPostBackURL = '/Advice/ShowComplaint';
            $.ajax({
                type: "GET",
                url: TeamDetailPostBackURL,
                contentType: "application/json; charset=utf-8",
                data: { "Id": recordId },
                datatype: "json",
                success: function (data) {
                    $("#lblkno").val(data.complaintHistories[0].Kno);
                    $("#lblMeterno").val(data.complaintHistories[0].MeterNo);
                    $("#lblprd").val(data.complaintHistories[0].PrevReadingdate);
                    $("#lblpr").val(data.complaintHistories[0].PrevReading);
                },
                error: function () {
                    alert("error occured.");
                }
            });
        }
    </script>
}

@if (TempData["AlertMessage"] != null)
{
    <script type="text/javascript">
        var msg = '@TempData["AlertMessage"]'
        var retStatus = '@TempData["retStatus"]'
        //alert(msg);
        if (retStatus.includes("0")) {
            $("#lblkno").val('123');
            swal("Error!", msg, "error");
        }
        else {
            $('#submitComplaint').prop('disabled', true);
            $('#submitComplaint1').prop('disabled', true);
            swal("Good job!", msg, "success");
        }
    </script>
}


@Html.AntiForgeryToken()
<div class="br-pageheader pd-y-15 pd-l-20">
    <nav class="breadcrumb pd-0 mg-0 tx-12">
        <a class="breadcrumb-item" href="~/Dashboard/Index">Bracket</a>
        @*<a class="breadcrumb-item" href="#">Forms</a>*@
        <span class="breadcrumb-item active">Advice</span>
    </nav>
</div><!-- br-pageheader -->
<div class="pd-x-20 pd-sm-x-30 pd-t-20 pd-sm-t-30">
    <h4 class="tx-gray-800 mg-b-5">Create Advice</h4>
    @*<p class="mg-b-0">Forms are used to collect user information with different element types of input, select, checkboxes, radios and more.</p>*@
</div>

<div class="br-pagebody">
    <div id="loadRemarkPopUp">

    </div>
    <div class="br-section-wrapper">
        <h6 class="tx-gray-800 tx-uppercase tx-bold tx-14 mg-b-10">Search Advice</h6>
        @*<p class="mg-b-30 tx-gray-600">A form with a label on top of each form control.</p>*@

    <div class="form-layout form-layout-1">
        <div class="row mg-b-25">
            <div class="col-lg-4">
                <div class="form-group mg-b-10-force">
                    <input id="txtsearchKno" name="searchKno" value="" type="number" placeholder="KNo." class="form-control searchtag" required />
                </div>
            </div><!-- col-4 -->

            <div class="col-lg-4">
                <div class="form-group mg-b-10-force">
                    <button class="btn btn-info" id="btnSearch">Search</button>
                </div>
            </div><!-- col-4 -->
        </div>

        @using (Html.BeginForm("CreateAdvice", "Advice", FormMethod.Post, new { name = "frm", data_parsley_validate = "" }))
        {
            @*<h6 class="tx-gray-800 tx-uppercase tx-bold tx-14 mg-b-10">Previous Complaint History</h6>*@
            <div class="form-layout form-layout-1">
                <div class="row mg-b-25">
                    <table id="comp" class="table table-bordered table-hover">
                        <thead>
                            <tr>
                                <th>Kno</th>
                                <th>Name</th>
                                <th>Address</th>
                                <th>Meter No.</th>
                                <th>Previous Reading</th>
                                <th>Previous Reading Date</th>
                                <th>Current Reading Date</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
            <div class="form-layout form-layout-1 mg-t-10">
                <div class="row mg-b-25">
                    <div class="col-lg-3">
                        <div class="form-group mg-b-10-force">
                            <label class="form-control-label">#KNo.</label>
                            <input class="form-control searchtag" id="lblkno" name="txtkno" type="text" value="" placeholder="" readonly="readonly" />
                        </div>
                    </div><!-- col-3 -->
                    <div class="col-lg-3">
                        <div class="form-group mg-b-10-force">
                            <label class="form-control-label">Old Meter No.</label>
                            <input class="form-control searchtag" id="lblMeterno" name="txtkno" type="text" value="" placeholder="" readonly="readonly" />
                        </div>
                    </div><!-- col-3 -->
                    <div class="col-lg-3">
                        <div class="form-group mg-b-10-force">
                            <label class="form-control-label">Old Meter Previous reading Date</label>
                            <input class="form-control searchtag" id="lblprd" name="txtkno" type="text" value="" placeholder="" readonly="readonly" />
                        </div>
                    </div><!-- col-3 -->
                    <div class="col-lg-3">
                        <div class="form-group mg-b-10-force">
                            <label class="form-control-label">Old Meter Previous reading</label>
                            <input class="form-control searchtag" id="lblpr" name="txtkno" type="text" value="" placeholder="" readonly="readonly" />
                        </div>
                    </div><!-- col-3 -->
                </div>
                <div class="row mg-b-25">
                    <div class="col-lg-4">
                        <div class="form-group mg-b-10-force">
                            <label class="form-control-label">Search Option: <span class="tx-danger">*</span></label>
                            @Html.DropDownList("ddlConsumerType", new List<SelectListItem>
                                {
                                new SelectListItem{ Text="MCO", Value = "1" },
                                new SelectListItem{ Text="RCO", Value = "2" },
                                new SelectListItem{ Text="DCO", Value = "3" },
                                new SelectListItem{ Text="PDCO", Value = "4" },
                                }, new { @class = "form-control select2", id = "Consumertype" })
                        </div>
                    </div><!-- col-4 -->
                </div>
            </div>

            <div class="form-layout form-layout-1 mg-t-10" id="mco">
                <div class="row mg-b-25">
                    <div class="col-lg-2">
                        <div class="form-group mg-b-10-force">
                            <label>New Meter No. <span class="tx-danger">*</span></label>
                            @Html.EditorFor(model => model.New_Meter_No, new { htmlAttributes = new { @class = "form-control", @placeholder = "", @required = true } })
                        </div>
                    </div><!-- col-3 -->
                    <div class="col-lg-2">
                        <div class="form-group mg-b-10-force">
                            <label class="form-control-label">Old Meter Current reading<span class="tx-danger">*</span></label>
                            @Html.EditorFor(model => model.Old_Meter_Current_reading, new { htmlAttributes = new { @class = "form-control", @placeholder = "", @required = true } })
                        </div>
                    </div><!-- col-3 -->
                    <div class="col-lg-2">
                        <div class="form-group mg-b-10-force">
                            <label class="form-control-label">Current Meter Previous reading</label>
                            @Html.EditorFor(model => model.Current_Meter_Previous_reading, new { htmlAttributes = new { @class = "form-control", @placeholder = "", @required = true } })
                        </div>
                    </div><!-- col-3 -->
                    <div class="col-lg-2">
                        <div class="form-group mg-b-10-force">
                            <label class="form-control-label">Current Meter Current reading<span class="tx-danger"></span></label>
                            @Html.EditorFor(model => model.Current_Meter_Current_reading, new { htmlAttributes = new { @class = "form-control", @placeholder = "", @required = true } })
                        </div>
                    </div><!-- col-3 -->
                    <div class="col-lg-3">
                        <div class="form-group mg-b-10-force">
                            <label class="form-control-label">Order date<span class="tx-danger"></span></label>
                            @Html.EditorFor(model => model.OrderDate1, string.Format("{0:yyyy-MM-dd}", fromDate), new { htmlAttributes = new { @class = "form-control", @type = "date", @required = true } })
                            @*@Html.TextBox("fromDate", string.Format("{0:yyyy-MM-dd}", fromDate), new { @class = "form-control mb-1", type = "date" })*@
                        </div>
                    </div><!-- col-3 -->
                </div>
                <div class="row mg-b-25">
                    <div class="col-lg-2">
                        <div class="form-group mg-b-10-force">
                            <label class="form-control-label">Receipt No.<span class="tx-danger">*</span></label>
                            @Html.EditorFor(model => model.Receipt_no, new { htmlAttributes = new { @class = "form-control", @placeholder = "", @required = true } })
                        </div>
                    </div><!-- col-3 -->
                    <div class="col-lg-2">
                        <div class="form-group mg-b-10-force">
                            <label class="form-control-label">Receipt Date<span class="tx-danger"></span></label>
                            @Html.EditorFor(model => model.Receipt_Date, string.Format("{0:yyyy-MM-dd}", fromDate), new { htmlAttributes = new { @class = "form-control", @type = "date", @required = true } })
                        </div>
                    </div><!-- col-3 -->
                    <div class="col-lg-2">
                        <div class="form-group mg-b-10-force">
                            <label class="form-control-label">Amount</label>
                            @Html.EditorFor(model => model.Amount, new { htmlAttributes = new { @class = "form-control", @placeholder = "", @type = "number", @required = true } })
                        </div>
                    </div><!-- col-3 -->

                </div>
                <div class="row mg-b-10">
                    <div class="col-lg-2">
                        <div class="form-group mg-b-10-force">
                            <input type="submit" value="Save" class="btn btn-primary btn-block" id="submitComplaint" />
                        </div>
                    </div>
                </div>
            </div>

        }

        @using (Html.BeginForm("CreateAdvice", "Advice", FormMethod.Post, new { name = "frm", data_parsley_validate = "" }))
        {
            <div class="form-layout form-layout-1 mg-t-10" id="dco">
                <div class="row mg-b-25">

                    <div class="col-lg-3">
                        <div class="form-group mg-b-10-force">
                            <label class="form-control-label">Meter Final reading<span class="tx-danger"></span></label>
                            @Html.EditorFor(model => model.Meter_Final_reading, new { htmlAttributes = new { @class = "form-control", @placeholder = "", @required = true } })
                        </div>
                    </div><!-- col-3 -->
                    <div class="col-lg-3">
                        <div class="form-group mg-b-10-force">
                            <label class="form-control-label">Order date<span class="tx-danger"></span></label>
                            @Html.EditorFor(model => model.OrderDate2, string.Format("{0:yyyy-MM-dd}", fromDate), new { htmlAttributes = new { @class = "form-control", @type = "date", @required = true } })
                        </div>
                    </div><!-- col-3 -->
                </div>
                <div class="row mg-b-10">
                    <div class="col-lg-2">
                        <div class="form-group mg-b-10-force">
                            <input type="submit" value="Save" class="btn btn-primary btn-block" id="submitComplaint1" onclick="return stopMultipleSubmit();" />
                        </div>
                    </div>
                </div>
            </div><!-- form-layout -->

            @Html.HiddenFor(model => model.Kno)
            @Html.HiddenFor(model => model.Order_Type)
        }
    </div>


        <div class="row mg-b-25">

        </div>
    </div><!-- br-section-wrapper -->
</div><!-- br-pagebody -->

    <script src="~/lib/parsleyjs/parsley.js"></script>
